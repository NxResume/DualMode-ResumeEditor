// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Auth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.Text
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  emailVerificationCode String?
  emailVerificationExpires DateTime?
  accounts      Account[]
  sessions      Session[]
  resumes       Resume[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id        String   @id @default(cuid())
  name      String
  content   String   @db.Text
  theme     String   @default("default")
  plugins   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDefault Boolean  @default(false)

  // 关联用户
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 关联设置
  settings ResumeSettings?
}

model ResumeSettings {
  id              String  @id @default(cuid())
  resumeId        String  @unique
  resume          Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  fontname        String  @default("default")
  pagePadding     Int     @default(36)
  pageLineHeight  Float   @default(1.9)
  pageBackground  String  @default("default")
  pageThemeColor  String  @default("0,0,0")
  imagePosition   String  @db.Text
  isScrollable    Boolean @default(false)
  editorMode      String  @default("source")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
